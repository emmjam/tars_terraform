#!/bin/bash +x

function log () {
  case $1 in
    "INFO")
      LOG_COLOR="\033[96m";;
    "ERROR")
      LOG_COLOR="\033[31m";;
    "WARN")
      LOG_COLOR="\033[93m" ;;
    "SUCCESS")
      LOG_COLOR="\033[32m" ;;
    *)
      LOG_COLOR="\033[1m" ;;
  esac

  echo -e "$${LOG_COLOR} [$(date)] $${1}: $2\033[0m" | tee -a "/var/log/bootstrap.log"
}

function error () {
  log "ERROR" "$1"
  exit
}

# Python is the best bet to safely escape the log data
# for json consumption. json is a std python lib so 
# minimal dependency requirements
function json_escape () {
    printf '%s' "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
}

export aws="$(which aws || echo '/usr/bin/aws')";
export curl="$(which curl || echo '/usr/bin/curl')";

export REGION="$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)";
log "[INFO] $REGION"
export INTERFACE=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | head -n 1)
export SUBNET_ID=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$${INTERFACE}/subnet-id)
export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
export NETWORK_INTERFACE_ID=$(aws ec2 describe-network-interfaces --filter "Name=subnet-id,Values=$${SUBNET_ID}" "Name=status,Values=available" --query 'NetworkInterfaces[0].NetworkInterfaceId' --region ${AWS_REGION} --output text)
export UPDATE_HOST=$(hostname)
log "[INFO] $INTERFACE"
log "[INFO] $SUBNET_ID"
log "[INFO] $INSTANCE_ID"
log "[INFO] $NETWORK_INTERFACE_ID"

log '[INFO] Attaching Network Interface'
ATTACH_RETRIES=10
until [ $${ATTACH_RETRIES} -eq 0 ]; do
  aws ec2 attach-network-interface \
    --network-interface-id $${NETWORK_INTERFACE_ID} \
    --instance-id $${INSTANCE_ID} \
    --region $REGION \
    --device-index 1 \
    && break
  let ATTACH_RETRIES=$${ATTACH_RETRIES}-1
  sleep 10
done

log '[INFO] Waiting for Network Interface to be attached'
ATTACH_STATUS='unknown'
ATTACH_RETRIES=10
until [ $${ATTACH_STATUS} == 'attached' ]; do
  ATTACH_STATUS=$(aws ec2 describe-network-interfaces \
    --network-interface-ids $${NETWORK_INTERFACE_ID}\
    --query NetworkInterfaces[].Attachment.Status \
    --region $REGION \
    --output text)
  let ATTACH_RETRIES=$${ATTACH_RETRIES}-1
  if [ $${ATTACH_RETRIES} -eq 0 ]; then
    log "[ERROR] Could not attach Network Interface after $${ATTACH_RETRIES} retries"
    exit 1
  fi
  sleep 5
done

# Instance ID begets all things...
log 'INFO' 'Retrieving Instance ID from Metadata';
instance_id="$($${curl} -s http://169.254.169.254/latest/meta-data/instance-id)";
if [ $${?} -ne 0 ]; then
  error "Failed to retrieve Instance ID";
fi
log 'INFO' "Instance ID: $${instance_id}";

# Get Current AWS Region in order to do anything useful...
log 'INFO' 'Retrieving Instance Identity Document from Metadata';
instance_identity_document="$($${curl} -s http://169.254.169.254/latest/dynamic/instance-identity/document)";
if [ $${?} -ne 0 ]; then
  error "$${curl} -s http://169.254.169.254/latest/dynamic/instance-identity/document";
else
  log 'INFO' 'Instance Identity Document Retrieved';

  region="$(echo "$${instance_identity_document}" | jq -r .region)";

  if [ $${?} -ne 0 ]; then
    error 'jq: Instance Identity Document could not be parsed for current Region';
  else
    log 'INFO' "Region retrieved: $${region}";
  fi;

  # Make it available to the AWS cli; who needs to specify the region manually on every single call(?)
  export AWS_DEFAULT_REGION="$${region}";
fi;



# Get the Autoscaling Group Name - it's a bit dirty but it works.
asg_name="$($${aws} autoscaling describe-auto-scaling-instances \
  --instance "$${instance_id}" \
  --output json \
  | jq -r .AutoScalingInstances[0].AutoScalingGroupName)";

if [ $${?} -ne 0 ]; then
  error 'Failed to retrieve the autoscaling group name for this instance';
else
  log 'INFO' "ASG name retrieved: $${asg_name}";
fi;

# Get the Launching LifeCycle Hook Name for this ASG (Making the assumption there's only one hook!)
lifecycle_hook_name="$($${aws} autoscaling describe-lifecycle-hooks \
  --auto-scaling-group-name "$${asg_name}" \
  --output json \
  | jq -r '.LifecycleHooks[] | select(.LifecycleTransition=="autoscaling:EC2_INSTANCE_LAUNCHING") | .LifecycleHookName')";

if [ $${?} -ne 0 ]; then
  error "Failed to retrieve lifecycle hook name for the autoscaling:EC2_INSTANCE_LAUNCHING transition for the autoscaling group named: $${asg_name}";
else
  log 'INFO' "Lifecycle hook name retrieved: $${lifecycle_hook_name}"
fi;

# Prerequisite information gathered - begin bootstrapping

# Puppet will restart the reporting-xe service
log 'INFO' 'Beginning  Oracle Reporting XE configuration'
log 'INFO' 'Reading parameter store'
tars_user_password=$($${aws} ssm get-parameter --name "/${ENVIRONMENT}/reporting-xe/all/tars-user-password" --with-decryption --query 'Parameter.Value' --output text)
  if [ $${?} -ne 0 ]; then
    error 'Unable to get tars_user_password parameter';
  else
    log 'INFO' "Retrieved tars_user_password parameter from parameter store";
  fi;

tars_admin_user=$($${aws} ssm get-parameter --name "/${ENVIRONMENT}/reporting-xe/all/admin-username" --query 'Parameter.Value' --output text)
  if [ $${?} -ne 0 ]; then
    error 'Unable to get tars_admin_user parameter';
  else
    log 'INFO' "Retrieved tars_admin_user parameter from parameter store";
  fi;

tars_admin_password=$($${aws} ssm get-parameter --name "/${ENVIRONMENT}/reporting-xe/all/admin-password" --with-decryption --query 'Parameter.Value' --output text)
  if [ $${?} -ne 0 ]; then
    error 'Unable to get tars_admin_password parameter';
  else
    log 'INFO' "Retrieved tars_admin_password parameter from parameter store";
  fi;

cert_password=$($${aws} ssm get-parameter --name "/${ENVIRONMENT}/reporting-xe/all/cert-password" --with-decryption --query 'Parameter.Value' --output text)
  if [ $${?} -ne 0 ]; then
    error 'Unable to get cert_password parameter';
  else
    log 'INFO' "Retrieved cert_password parameter from parameter store";
  fi;

log 'INFO' 'Checking Oracle is available'
su oracle -s /tmp/oraclexe_reporting_xe_db_check.sh
log 'INFO' "Oracle is available";

# build tars
log 'INFO' 'Running oraclexe_reporting_xe_03build_tars'
su oracle -s /tmp/oraclexe_reporting_xe_03build_tars.sh $tars_user_password
log 'INFO' 'Completed oraclexe_reporting_xe_03build_tars, check /var/log/oraclexe_reporting_xe_03tars_build.log for details'

# create schema
log 'INFO' 'Running oraclexe_reporting_xe_04schema'
su oracle -s /tmp/oraclexe_reporting_xe_04schema.sh
su oracle -s /tmp/oraclexe_reporting_xe_04schema.sh # has to run twice as the first time errors
log 'INFO' 'Completed oraclexe_reporting_xe_04schema, check /var/log/oraclexe_reporting_xe_04schema.log for details'

# install
log 'INFO' 'Running oraclexe_reporting_xe_05install'
su oracle -s /tmp/oraclexe_reporting_xe_05install.sh
log 'INFO' 'Completed oraclexe_reporting_xe_05install, check /var/log/oraclexe_reporting_xe_05install.log for details'

# images
log 'INFO' 'Running oraclexe_reporting_xe_06images'
su oracle -s /tmp/oraclexe_reporting_xe_06images.sh
log 'INFO' 'Completed oraclexe_reporting_xe_06images, check /var/log/oraclexe_reporting_xe_06images.log for details'

log 'INFO' 'Running oraclexe_reporting_xe_07change_password'
su oracle -s /tmp/oraclexe_reporting_xe_07change_password.sh "$tars_admin_user" "admin_email" "$tars_admin_password"
log 'INFO' 'Completed oraclexe_reporting_xe_07change_password'

log 'INFO' 'Adding hostname to listener'
sed -i "s/127.0.0.1/$UPDATE_HOST/g" /opt/oracle/product/18c/dbhomeXE/network/admin/listener.ora
  if [ $${?} -ne 0 ]; then
    error 'Unable to update hostname in listener';
  else
    log 'INFO' "Updated hostname in Listener";
  fi;
log 'INFO' 'Restarting listener'
su - oracle -c "lsnrctl stop"
  if [ $${?} -ne 0 ]; then
    error 'Unable to stop listener';
  else
    log 'INFO' "Stopped Listener";
  fi;
su - oracle -c "lsnrctl start"
  if [ $${?} -ne 0 ]; then
    error 'Unable to start listener';
  else
    log 'INFO' "Started Listener";
  fi;
log 'INFO' 'Running oraclexe_reporting_xe_08register'
su oracle -s /tmp/oraclexe_reporting_xe_08register.sh
log 'INFO' 'Completed oraclexe_reporting_xe_08register'

log 'INFO' 'Configuring https'
keytool -genkey -keyalg RSA \
        -alias tomcat -keystore /opt/apache-tomcat/conf/tomcat.jks \
        -storepass $cert_password \
        -dname "cn=Reporting-XE, ou=orgunit, o=org, c=UK" \
        -keypass $cert_password \
        -validity 360 -keysize 2048 \
        -deststoretype pkcs12
  if [ $${?} -ne 0 ]; then
    error 'Unable to create certificate';
  else
    log 'INFO' "Created certificate";
  fi;

\cp /tmp/server.xml /opt/apache-tomcat/conf/server.xml
  if [ $${?} -ne 0 ]; then
    error 'Unable to copy server.xml';
  else
    log 'INFO' "Copied server.xml";
  fi;

sed -i "s/password_placeholder/$cert_password/g" /opt/apache-tomcat/conf/server.xml
  if [ $${?} -ne 0 ]; then
    error 'Unable to update server.xml';
  else
    log 'INFO' "Updated server.xml";
  fi;

systemctl stop tomcat.service; systemctl start tomcat.service
  if [ $${?} -ne 0 ]; then
    error 'Unable to restart tomcat.service';
  else
    log 'INFO' "Restarted tomcat.service";
  fi;

log 'INFO' 'Configured https'

log 'INFO' 'Completed Oracle Reporting XE scripts'


BOOTSTRAP_SUCCESS=1

log 'INFO' 'Running puppet to configure environment'

sed -E -i "s/'[a-z0-9]{8}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-f0-9]{4}\-[a-z0-9]{12}'/'${KMS_KEY}'/g" /etc/eyaml/config.yaml

# Shift this to cloud-init config yaml
facts_path="/opt/puppetlabs/facter/facts.d"
echo -n 'environment: ${ENVIRONMENT}'    > "$${facts_path}/environment.yaml"
echo -n 'nodetype: ${NODETYPE}'          > "$${facts_path}/nodetype.yaml"
echo -n 'aws_account: ${AWS_ACCOUNT_ID}' > "$${facts_path}/aws_account.yaml"

cd /opt/packer-puppet-masterless

/opt/puppetlabs/bin/puppet apply \
  --verbose \
  --detailed-exitcodes \
  --modulepath='/opt/packer-puppet-masterless/module-0:/opt/packer-puppet-masterless/module-1' \
  --hiera_config='/opt/packer-puppet-masterless/hiera.yaml' \
  /opt/packer-puppet-masterless/manifests/site.pp

case $${?} in
  6|4|1)
    log "ERROR" "Puppet run failed with exit code $${?}"
    BOOTSTRAP_SUCCESS=0 ;;
  *)
    log "INFO" "Puppet run completed" ;;
esac

if [ $${BOOTSTRAP_SUCCESS} -eq 1 ]; then
  log 'SUCCESS' 'Bootstrap complete for nodetype: ${NODETYPE}'
else
  log 'ERROR' 'Bootstrap abandon for nodetype: ${NODETYPE}'
fi

# Sure would be lovely if date could give unix time 
# in milliseconds
timestamp=$(($(date +'%s * 1000 + %-N / 1000000')))
log_data="$(json_escape "$(cat /var/log/cloud-init-output.log)")"

echo """
[
  {
    \"timestamp\": $${timestamp},
    \"message\": $${log_data}
  }
]""" > /var/log/cwl-cloud-init.txt

aws logs create-log-stream \
  --region $${region} \
  --log-group-name ${LOG_GROUP} \
  --log-stream-name $${instance_id}

aws logs put-log-events \
  --region $${region} \
  --log-group-name ${LOG_GROUP} \
  --log-stream-name $${instance_id} \
  --log-events file:///var/log/cwl-cloud-init.txt

log 'INFO' 'Completing lifecycle action'

if [ $${BOOTSTRAP_SUCCESS} -eq 1 ]; then
  $${aws} autoscaling complete-lifecycle-action \
      --lifecycle-action-result CONTINUE \
      --instance-id "$${instance_id}" \
      --lifecycle-hook-name "$${lifecycle_hook_name}" \
      --auto-scaling-group-name "$${asg_name}" \
      || error 'Failed to complete lifecycle hook';
else
  $${aws} autoscaling complete-lifecycle-action \
    --lifecycle-action-result ABANDON \
    --instance-id "$${instance_id}" \
    --lifecycle-hook-name "$${lifecycle_hook_name}" \
    --auto-scaling-group-name "$${asg_name}" \
    || error 'Failed to complete lifecycle hook';
fi
