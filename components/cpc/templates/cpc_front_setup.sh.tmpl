#!/bin/bash

function log() {
  echo "[$(date)]$1" | tee -a /var/log/puppet_cloudinit.log
}

curl_cmd="curl --connect-timeout 3 -s -f http://CPC-BACKEND:8080/training-centre/TrainingCentreWebService/TrainingCentre?wsdl 2>&1 > /dev/null"
retries=30
retry_delay=10
backend=1
log '[INFO] Waiting for backend to respond'

for ((trys=1;trys<=$${retries};trys++));
do
  eval $${curl_cmd}
  if [ $$? -eq 0 ]
  then
    log '[INFO] Backend responding'
    backend=0
    break
  else
    log '[INFO] Backend failed to respond. Retrying..'
    sleep $${retry_delay}
  fi
done

if [ $${backend} -eq 0  ] 
then
  log '[INFO] Running puppet to configure environment'

  sed -E -i "s/'[a-z0-9]{8}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-f0-9]{4}\-[a-z0-9]{12}'/'${KMS_KEY}'/g" /etc/eyaml/config.yaml

  # Shift this to cloud-init config yaml
  facts_path="/opt/puppetlabs/facter/facts.d"
  echo -n 'environment: ${ENVIRONMENT}'    > "$${facts_path}/environment.yaml"
  echo -n 'nodetype: ${NODETYPE}'          > "$${facts_path}/nodetype.yaml"
  echo -n 'aws_account: ${AWS_ACCOUNT_ID}' > "$${facts_path}/aws_account.yaml"

  cd /opt/packer-puppet-masterless

  # TODO: peacheym: Convert this script to use standardised error handling
  # add --detailed-exitcodes and handle the return codes puppet provides
  /opt/puppetlabs/bin/puppet apply \
    --verbose \
    --modulepath='/opt/packer-puppet-masterless/module-0:/opt/packer-puppet-masterless/module-1' \
    --hiera_config='/opt/packer-puppet-masterless/hiera.yaml' \
    /opt/packer-puppet-masterless/manifests/site.pp

  log '[INFO] Puppet configuration finished'
else
  log '[ERROR] Backend failed to respond'
  exit 1
fi
